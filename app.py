# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w40BE6OIRCYWduOBMN_tjMTAlWLyDOXy
"""

import streamlit as st
import pandas as pd
import joblib
import tensorflow as tf
from tensorflow.keras.models import load_model
import io
import tempfile

# ==== 自訂 Cox PH loss（用於模型載入）====
def cox_ph_loss(y_true, y_pred):
    events = tf.cast(y_true[:, 0], tf.float32)
    times  = tf.cast(y_true[:, 1], tf.float32)
    risk   = tf.squeeze(y_pred, axis=-1)

    order = tf.argsort(times, direction='DESCENDING')
    risk_ordered  = tf.gather(risk,  order)
    event_ordered = tf.gather(events, order)

    shift = tf.reduce_max(risk_ordered)
    exp_risk_shifted = tf.exp(risk_ordered - shift)

    cumsum_exp = tf.cumsum(exp_risk_shifted)
    log_cumsum_exp = tf.math.log(cumsum_exp) + shift

    log_lik = risk_ordered - log_cumsum_exp
    log_lik_event = tf.boolean_mask(log_lik, event_ordered > 0)
    neg_mean_log_lik = -tf.reduce_mean(log_lik_event)
    return neg_mean_log_lik

# ==== 特徵定義 ====
continuous_vars = ['age', 'ca199', 'size']
categorical_vars = ['sex', 'grade', 'margin', 'LVI', 'PNI', 'pT', 'pN',
                    'cysticneoplasm', 'neoadjuvant', 'opmethod']
all_model_features = continuous_vars + categorical_vars

sex_opts   = ["M", "F"]
grade_opts = ["G1", "G2", "G3"]
yn_opts    = ["0", "1", "No", "Yes"]
pT_opts    = ["T1", "T2", "T3", "T4"]
pN_opts    = ["N0", "N1", "N2", "N3"]
op_opts    = ["Open", "Lap", "Robot", "Other"]

# ==== 載入模型與前處理器 ====
@st.cache_resource
def load_resources(model_file, preproc_file):
    try:
        # 將 UploadedFile 寫入暫存檔
        with tempfile.NamedTemporaryFile(delete=False, suffix=".h5") as tmp_model:
            tmp_model.write(model_file.read())
            model_path = tmp_model.name
        model = load_model(model_path, custom_objects={'cox_ph_loss': cox_ph_loss})
    except Exception as e:
        return None, None, f"❌ 模型載入失敗：{e}"

    try:
        preproc = joblib.load(io.BytesIO(preproc_file.read()))
    except Exception as e:
        return None, None, f"❌ Preprocessor 載入失敗：{e}"

    return model, preproc, "✅ 模型與 Preprocessor 載入成功"

# ==== 預測 ====
def predict_once(model, preproc, input_data):
    df = pd.DataFrame([input_data], columns=all_model_features)
    for col in continuous_vars:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    X = preproc.transform(df)
    risk = model.predict(X, verbose=0).reshape(-1)[0]
    return risk

# ==== Streamlit App ====
st.title("🧮 Cox 模型風險預測器（Colab + Streamlit + Cloudflared）")

st.subheader("1. 上傳模型與 Preprocessor")
model_file = st.file_uploader("請上傳 model.h5", type=["h5"])
preproc_file = st.file_uploader("請上傳 preprocessor.pkl", type=["pkl"])

if model_file and preproc_file:
    model, preproc, msg = load_resources(model_file, preproc_file)
    st.success(msg)
else:
    model, preproc = None, None

st.subheader("2. 輸入特徵欄位")

with st.form("prediction_form"):
    age = st.number_input("Age", value=60)
    ca199 = st.number_input("CA199", value=35.0)
    size = st.number_input("Tumor Size", value=2.5)

    sex = st.selectbox("Sex", sex_opts)
    grade = st.selectbox("Grade", grade_opts)
    margin = st.selectbox("Margin", yn_opts)
    LVI = st.selectbox("LVI", yn_opts)
    PNI = st.selectbox("PNI", yn_opts)
    pT = st.selectbox("pT", pT_opts)
    pN = st.selectbox("pN", pN_opts)
    cysticneoplasm = st.selectbox("Cystic Neoplasm", yn_opts)
    neoadjuvant = st.selectbox("Neoadjuvant", yn_opts)
    opmethod = st.selectbox("Surgical Method", op_opts)

    submitted = st.form_submit_button("計算 Risk Score")

    if submitted:
        if model is None or preproc is None:
            st.warning("請先上傳模型與前處理器")
        else:
            input_data = {
                'age': age,
                'ca199': ca199,
                'size': size,
                'sex': sex,
                'grade': grade,
                'margin': margin,
                'LVI': LVI,
                'PNI': PNI,
                'pT': pT,
                'pN': pN,
                'cysticneoplasm': cysticneoplasm,
                'neoadjuvant': neoadjuvant,
                'opmethod': opmethod,
            }
            score = predict_once(model, preproc, input_data)
            st.success(f"💡 預測風險分數：`{score:.6f}`（越高代表風險越高）")