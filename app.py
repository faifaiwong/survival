# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w40BE6OIRCYWduOBMN_tjMTAlWLyDOXy
"""

import streamlit as st
import pandas as pd
import joblib
import tempfile
import os
from typing import Optional, Tuple

st.set_page_config(page_title="風險分數預測器（Cox 模型）", layout="centered")


# -------------------------
# custom loss（延遲 import tensorflow）
# 定義時不要在 module level 直接 import tensorflow，
# 而是在 function 內部 import，讓這個函數可被傳給 load_model 的 custom_objects。
# -------------------------
def cox_ph_loss(y_true, y_pred):
    import tensorflow as tf  # lazy import
    events = tf.cast(y_true[:, 0], tf.float32)
    times = tf.cast(y_true[:, 1], tf.float32)
    risk = tf.squeeze(y_pred, axis=-1)

    order = tf.argsort(times, direction='DESCENDING')
    risk_ordered = tf.gather(risk, order)
    event_ordered = tf.gather(events, order)

    shift = tf.reduce_max(risk_ordered)
    exp_risk_shifted = tf.exp(risk_ordered - shift)

    cumsum_exp = tf.cumsum(exp_risk_shifted)
    log_cumsum_exp = tf.math.log(cumsum_exp) + shift

    log_lik = risk_ordered - log_cumsum_exp
    log_lik_event = tf.boolean_mask(log_lik, event_ordered > 0)
    neg_mean_log_lik = -tf.reduce_mean(log_lik_event)
    return neg_mean_log_lik


# -------------------------
# features 列表（與 UI 選項）
# -------------------------
continuous_vars = ['age', 'ca199', 'size']
categorical_vars = ['sex', 'grade', 'margin', 'LVI', 'PNI', 'pT', 'pN',
                    'cysticneoplasm', 'neoadjuvant', 'opmethod']
all_model_features = continuous_vars + categorical_vars

sex_opts = ["M", "F"]
grade_opts = ["G1", "G2", "G3"]
yn_opts = ["0", "1", "No", "Yes"]
pT_opts = ["T1", "T2", "T3", "T4"]
pN_opts = ["N0", "N1", "N2", "N3"]
op_opts = ["Open", "Lap", "Robot", "Other"]


# -------------------------
# helper: 把 bytes 寫成暫存檔並回傳路徑
# -------------------------
def _write_bytes_to_tempfile(b: bytes, suffix: str) -> str:
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
    try:
        tmp.write(b)
        tmp.flush()
        return tmp.name
    finally:
        tmp.close()


# -------------------------
# 載入器：接受 model_bytes 與 preproc_bytes（可被 st.cache_resource 快取）
# 返回 (model, preproc, message)
# -------------------------
@st.cache_resource
def load_resources_from_bytes(model_bytes: bytes, preproc_bytes: bytes) -> Tuple[Optional[object], Optional[object], str]:
    model_path = None
    preproc_path = None
    try:
        # 把 bytes 寫成暫存檔（load_model / joblib 需要 file path）
        model_path = _write_bytes_to_tempfile(model_bytes, suffix=".h5")
        preproc_path = _write_bytes_to_tempfile(preproc_bytes, suffix=".pkl")

        # 延遲 import tensorflow 並載入 model
        try:
            import tensorflow as tf  # lazy import
            from tensorflow.keras.models import load_model
        except Exception as e:
            return None, None, f"❌ 無法 import TensorFlow：{e}. 若要在此環境載入模型，請在 requirements.txt 指定可用的 tensorflow-cpu 版本。"

        # 載入 model 與 preprocessor
        model = load_model(model_path, custom_objects={'cox_ph_loss': cox_ph_loss})
        preproc = joblib.load(preproc_path)

        return model, preproc, "✅ 模型與 Preprocessor 載入成功"
    except Exception as e:
        return None, None, f"❌ 載入失敗：{e}"
    finally:
        # 嘗試刪除暫存檔（載入完成後通常可刪）
        for p in (model_path, preproc_path):
            try:
                if p and os.path.exists(p):
                    os.remove(p)
            except Exception:
                pass


# -------------------------
# predict 函式
# -------------------------
def predict_once(model, preproc, input_data: dict):
    df = pd.DataFrame([input_data], columns=all_model_features)
    for col in continuous_vars:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    X = preproc.transform(df)
    # model.predict 回傳 shape (1,1) 或 (1,) 取第一個值
    risk_arr = model.predict(X, verbose=0)
    # reshape 安全處理
    try:
        risk = float(risk_arr.reshape(-1)[0])
    except Exception:
        # 若輸出為純標量
        risk = float(risk_arr[0])
    return risk


# -------------------------
# Streamlit UI
# -------------------------
st.title("🧮 風險分數預測器（Cox 模型）")
st.write("說明：請上傳由你信任來源產生的 `model.h5`（Keras）與 `preprocessor.pkl`（joblib）。上傳後按「計算 Risk Score」。")

st.subheader("1. 載入模型與前處理器（上傳）")
col1, col2 = st.columns(2)
with col1:
    model_file = st.file_uploader("上傳 model.h5", type=["h5"])
with col2:
    preproc_file = st.file_uploader("上傳 preprocessor.pkl", type=["pkl"])

model = None
preproc = None

if model_file is not None and preproc_file is not None:
    # 讀 bytes（若之前 read 過，請先 seek(0)）
    try:
        model_file.seek(0)
        preproc_file.seek(0)
        model_bytes = model_file.read()
        preproc_bytes = preproc_file.read()
    except Exception as e:
        st.error(f"讀取上傳檔案失敗：{e}")
        model_bytes = preproc_bytes = None

    if model_bytes and preproc_bytes:
        with st.spinner("載入模型與前處理器...（這可能需要一些時間）"):
            model, preproc, msg = load_resources_from_bytes(model_bytes, preproc_bytes)
            if model is None or preproc is None:
                st.error(msg)
            else:
                st.success(msg)
else:
    st.info("請同時上傳 model.h5 與 preprocessor.pkl（兩者皆需）。\n\n提示：若不想在 Streamlit Cloud 安裝 TensorFlow，可把模型放到外部服務並改用遠端 inference。")

st.subheader("2. 輸入 Features")
with st.form("prediction_form"):
    age = st.number_input("Age", value=60, step=1)
    ca199 = st.number_input("CA199", value=35.0, format="%.2f")
    size = st.number_input("Tumor Size (cm)", value=2.5, format="%.2f")

    sex = st.selectbox("Sex", sex_opts)
    grade = st.selectbox("Grade", grade_opts)
    margin = st.selectbox("Margin", yn_opts)
    LVI = st.selectbox("LVI", yn_opts)
    PNI = st.selectbox("PNI", yn_opts)
    pT = st.selectbox("pT", pT_opts)
    pN = st.selectbox("pN", pN_opts)
    cysticneoplasm = st.selectbox("Cystic Neoplasm", yn_opts)
    neoadjuvant = st.selectbox("Neoadjuvant", yn_opts)
    opmethod = st.selectbox("Surgical Method", op_opts)

    submitted = st.form_submit_button("計算 Risk Score")

    if submitted:
        if model is None or preproc is None:
            st.warning("請先上傳並成功載入模型與前處理器（model.h5 與 preprocessor.pkl）。")
        else:
            input_data = {
                'age': age,
                'ca199': ca199,
                'size': size,
                'sex': sex,
                'grade': grade,
                'margin': margin,
                'LVI': LVI,
                'PNI': PNI,
                'pT': pT,
                'pN': pN,
                'cysticneoplasm': cysticneoplasm,
                'neoadjuvant': neoadjuvant,
                'opmethod': opmethod,
            }
            try:
                with st.spinner("計算中..."):
                    score = predict_once(model, preproc, input_data)
                st.success(f"💡 預測風險分數：`{score:.6f}`（分數越高風險越高）")
            except Exception as e:
                st.error(f"預測時發生錯誤：{e}")

# -------------------------
# 額外：顯示已載入的 model / preproc quick info（方便 debug）
# -------------------------
if model is not None:
    st.write("**模型已載入（記憶體）**")
if preproc is not None:
    st.write("**Preprocessor 已載入（記憶體）**")