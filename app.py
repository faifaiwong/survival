# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w40BE6OIRCYWduOBMN_tjMTAlWLyDOXy
"""

import joblib
import numpy as np
import pandas as pd
import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model

# ==== Cox loss (模型載入需要；推論其實用不到) ====
def cox_ph_loss(y_true, y_pred):
    events = tf.cast(y_true[:, 0], tf.float32)
    times  = tf.cast(y_true[:, 1], tf.float32)
    risk   = tf.squeeze(y_pred, axis=-1)
    order = tf.argsort(times, direction='DESCENDING')
    risk_ordered  = tf.gather(risk,  order)
    event_ordered = tf.gather(events, order)
    shift = tf.reduce_max(risk_ordered)
    exp_risk_shifted = tf.exp(risk_ordered - shift)
    cumsum_exp = tf.cumsum(exp_risk_shifted)
    log_cumsum_exp = tf.math.log(cumsum_exp) + shift
    log_lik = risk_ordered - log_cumsum_exp
    log_lik_event = tf.boolean_mask(log_lik, event_ordered > 0)
    return -tf.reduce_mean(log_lik_event)

# ==== 快取載入 ====
@st.cache_resource
def load_artifacts():
    preprocessor = joblib.load("preprocessor.pkl")
    model = load_model("model.h5", custom_objects={"cox_ph_loss": cox_ph_loss}, compile=False)
    return preprocessor, model

preprocessor, model = load_artifacts()

# ==== 在這裡直接定義特徵 ====
continuous_vars = ['age', 'ca199', 'size']
categorical_vars = ['sex', 'grade', 'margin', 'LVI', 'PNI', 'pT', 'pN',
                    'cysticneoplasm', 'neoadjuvant', 'opmethod']

st.set_page_config(page_title="Cox Risk Predictor", page_icon="⏳", layout="centered")
st.title("⏳ Cox Proportional Hazards – 風險分數預測")
st.write("輸入臨床變數，取得模型的相對風險分數（數值越高代表風險越高）。")

# === UI：輸入欄位 ===
st.subheader("輸入特徵")

cont_inputs = {}
cont_inputs['age']   = st.number_input("age", min_value=0.0, max_value=120.0, value=60.0, step=1.0)
cont_inputs['ca199'] = st.number_input("ca199", min_value=0.0, max_value=1e5, value=100.0, step=1.0)
cont_inputs['size']  = st.number_input("size", min_value=0.0, max_value=500.0, value=30.0, step=1.0)

cat_inputs = {}
cat_inputs['sex']             = st.selectbox("sex", ["male", "female"])
cat_inputs['grade']           = st.selectbox("grade", ["G1", "G2", "G3"])
cat_inputs['margin']          = st.selectbox("margin", ["R0", "R1", "R2"])
cat_inputs['LVI']             = st.selectbox("LVI", ["no", "yes"])
cat_inputs['PNI']             = st.selectbox("PNI", ["no", "yes"])
cat_inputs['pT']              = st.selectbox("pT", ["T1", "T2", "T3", "T4"])
cat_inputs['pN']              = st.selectbox("pN", ["N0", "N1", "N2"])
cat_inputs['cysticneoplasm']  = st.selectbox("cysticneoplasm", [0, 1])
cat_inputs['neoadjuvant']     = st.selectbox("neoadjuvant", [0, 1])
cat_inputs['opmethod']        = st.selectbox("opmethod", ["Open", "Lap", "Robot"])

if st.button("預測風險分數"):
    row = {**cont_inputs, **cat_inputs}
    df_in = pd.DataFrame([row], columns=continuous_vars + categorical_vars)

    X = preprocessor.transform(df_in)
    if hasattr(X, "toarray"):  # 處理 sparse
        X = X.toarray()

    risk = model.predict(X, verbose=0).reshape(-1)[0]
    st.success(f"模型風險分數: **{risk:.4f}**")
    st.caption("數值越高代表風險越高。")